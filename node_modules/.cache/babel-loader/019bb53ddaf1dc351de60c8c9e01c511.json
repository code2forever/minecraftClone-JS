{"ast":null,"code":"import { nanoid } from \"nanoid\";\nimport create from \"zustand\";\n\nconst getLocalStorage = key => JSON.parse(window.localStorage.getItem(key));\n\nconst setLocalStorage = (key, value) => window.localStorage.setItem(key, JSON.stringify(value));\n\nexport const useStore = create(set => ({\n  texture: 'dirt',\n  cubes: getLocalStorage('cubes') || [],\n  addCube: (x, y, z) => {\n    set(prev => ({\n      cubes: [...prev.cubes, {\n        key: nanoid(),\n        pos: [x, y, z],\n        texture: prev.texture\n      }]\n    }));\n  },\n  removeCube: (x, y, z) => {\n    set(prev => ({\n      cubes: prev.cubes.filter(cube => {\n        const [X, Y, Z] = cube.pos;\n        return X !== x || Y !== y || Z !== z;\n      })\n    }));\n  },\n  setTexture: texture => {\n    set(() => ({\n      texture\n    }));\n  },\n  saveWorld: () => {\n    set(prev => {\n      setLocalStorage('cubes', prev.cubes);\n    });\n  },\n  resetWorld: () => {\n    set(() => ({\n      cubes: []\n    }));\n  }\n}));","map":{"version":3,"names":["nanoid","create","getLocalStorage","key","JSON","parse","window","localStorage","getItem","setLocalStorage","value","setItem","stringify","useStore","set","texture","cubes","addCube","x","y","z","prev","pos","removeCube","filter","cube","X","Y","Z","setTexture","saveWorld","resetWorld"],"sources":["D:/Git files/Minecraft/minecraftClone-JS/src/hooks/useStore.js"],"sourcesContent":["import { nanoid } from \"nanoid\";\r\nimport create from \"zustand\";\r\n\r\nconst getLocalStorage=(key)=>\r\n  JSON.parse(window.localStorage.getItem(key));\r\nconst setLocalStorage=(key,value)=>\r\n  window.localStorage.setItem(key,JSON.stringify(value));\r\n\r\n\r\n  export const useStore=create((set)=>({\r\n    texture:'dirt',\r\n    cubes:getLocalStorage('cubes') || [],\r\n    addCube:(x,y,z)=>{\r\n      set((prev)=>({\r\n        cubes:[...prev.cubes,\r\n        {\r\n          key:nanoid(),\r\n          pos:[x,y,z],\r\n          texture:prev.texture\r\n        }\r\n      ]\r\n      }))\r\n    },\r\n    removeCube:(x,y,z)=>{\r\n      set((prev)=>(\r\n        {cubes:prev.cubes.filter((cube)=>{\r\n          const [X,Y,Z]=cube.pos;\r\n          return X!==x || Y!==y || Z!==z\r\n        })}\r\n      ))\r\n        },\r\n    setTexture:(texture)=>{\r\n      set(()=>\r\n      ({texture}))\r\n    },\r\n    saveWorld:()=>{\r\n        set((prev)=>{\r\n        setLocalStorage('cubes',prev.cubes);\r\n    })\r\n  },\r\n    resetWorld:()=>{set(()=>({\r\n      cubes:[]\r\n    }))}\r\n  }))"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,OAAOC,MAAP,MAAmB,SAAnB;;AAEA,MAAMC,eAAe,GAAEC,GAAD,IACpBC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BL,GAA5B,CAAX,CADF;;AAEA,MAAMM,eAAe,GAAC,CAACN,GAAD,EAAKO,KAAL,KACpBJ,MAAM,CAACC,YAAP,CAAoBI,OAApB,CAA4BR,GAA5B,EAAgCC,IAAI,CAACQ,SAAL,CAAeF,KAAf,CAAhC,CADF;;AAIE,OAAO,MAAMG,QAAQ,GAACZ,MAAM,CAAEa,GAAD,KAAQ;EACnCC,OAAO,EAAC,MAD2B;EAEnCC,KAAK,EAACd,eAAe,CAAC,OAAD,CAAf,IAA4B,EAFC;EAGnCe,OAAO,EAAC,CAACC,CAAD,EAAGC,CAAH,EAAKC,CAAL,KAAS;IACfN,GAAG,CAAEO,IAAD,KAAS;MACXL,KAAK,EAAC,CAAC,GAAGK,IAAI,CAACL,KAAT,EACN;QACEb,GAAG,EAACH,MAAM,EADZ;QAEEsB,GAAG,EAAC,CAACJ,CAAD,EAAGC,CAAH,EAAKC,CAAL,CAFN;QAGEL,OAAO,EAACM,IAAI,CAACN;MAHf,CADM;IADK,CAAT,CAAD,CAAH;EASD,CAbkC;EAcnCQ,UAAU,EAAC,CAACL,CAAD,EAAGC,CAAH,EAAKC,CAAL,KAAS;IAClBN,GAAG,CAAEO,IAAD,KACF;MAACL,KAAK,EAACK,IAAI,CAACL,KAAL,CAAWQ,MAAX,CAAmBC,IAAD,IAAQ;QAC/B,MAAM,CAACC,CAAD,EAAGC,CAAH,EAAKC,CAAL,IAAQH,IAAI,CAACH,GAAnB;QACA,OAAOI,CAAC,KAAGR,CAAJ,IAASS,CAAC,KAAGR,CAAb,IAAkBS,CAAC,KAAGR,CAA7B;MACD,CAHM;IAAP,CADE,CAAD,CAAH;EAMG,CArB8B;EAsBnCS,UAAU,EAAEd,OAAD,IAAW;IACpBD,GAAG,CAAC,OACH;MAACC;IAAD,CADG,CAAD,CAAH;EAED,CAzBkC;EA0BnCe,SAAS,EAAC,MAAI;IACVhB,GAAG,CAAEO,IAAD,IAAQ;MACZZ,eAAe,CAAC,OAAD,EAASY,IAAI,CAACL,KAAd,CAAf;IACH,CAFM,CAAH;EAGL,CA9BoC;EA+BnCe,UAAU,EAAC,MAAI;IAACjB,GAAG,CAAC,OAAK;MACvBE,KAAK,EAAC;IADiB,CAAL,CAAD,CAAH;EAEZ;AAjC+B,CAAR,CAAD,CAArB"},"metadata":{},"sourceType":"module"}